{
  "version": 3,
  "sources": ["../src/heap/index.ts", "../src/stack/index.ts", "../src/index.ts"],
  "sourcesContent": ["import { DataObj, DataItem, HeapData, HeapDataArguments } from './type';\r\n\r\nclass Heap {\r\n    public data: HeapData;\r\n    public length: number;\r\n    public priority: string;\r\n    public small: boolean;\r\n\r\n    /**\r\n     * @param data      \u6570\u636E\u6E90\r\n     * @param small     \u5F53\u524D\u5806\u662F\u5426\u4E3A\u5C0F\u5806\r\n     * @param priority  \u5F53data\u4E2D\u6BCF\u4E00\u9879\u4E3A\u5BF9\u8C61\u65F6,\u6B64\u5B57\u7B26\u4E32\u4EE3\u6307\u5176\u4E2D\u53EF\u4EE5\u51B3\u5B9A\u5806\u987A\u5E8F\u7684key\r\n     */\r\n    constructor(data: HeapDataArguments, small = false, priority?: string) {\r\n        small = this.small = Boolean(small);\r\n        priority = this.priority = priority ? priority : '';\r\n\r\n        if (data && data.length) {\r\n            this.length = data.length;\r\n            this.data = data;\r\n            this.initHeap();\r\n        } else {\r\n            this.length = 0;\r\n            this.data = [];\r\n        }\r\n\r\n        Object.defineProperties(this, {\r\n            small: {\r\n                get() {\r\n                    return small;\r\n                },\r\n                set(val) {\r\n                    if (val && Boolean(val) !== small) {\r\n                        small = Boolean(val);\r\n                        this.initHeap();\r\n                    }\r\n                },\r\n            },\r\n            priority: {\r\n                get() {\r\n                    return priority;\r\n                },\r\n                set(val) {\r\n                    if (val && String(val) !== priority) {\r\n                        priority = String(val);\r\n                        this.initHeap();\r\n                    }\r\n                },\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * \u8C03\u6574\u4E3A\u5927\u5806\r\n     * @param parentIndex   \u8C03\u6574\u7684\u7236\u8282\u70B9\u7D22\u5F15\r\n     * @param data          \u8C03\u6574\u7684\u5806\u7684\u7269\u7406\u5B58\u50A8\r\n     * @param priority      \u6570\u636E\u4F18\u5148\u7EA7\u7684key\u503C\r\n     * @param downIndex     \u9012\u5F52\u8C03\u6574\u7684\u8FB9\u754C\u7D22\u5F15\r\n     */\r\n    static adjustBigHeap(\r\n        parentIndex: number,\r\n        data: HeapData,\r\n        priority: string,\r\n        downIndex?: number,\r\n    ) {\r\n        const childIndex = 2 * parentIndex + 1;\r\n        let parentPriority = 0;\r\n        let leftPriority = 0;\r\n        let rightPriority = 0;\r\n\r\n        let maxChildIndex = childIndex;\r\n        let maxChildPriority = 0;\r\n\r\n        // \u5411\u4E0B\u8C03\u6574\u5806\u4E34\u754C\u6761\u4EF6\u4E3A\u5DE6\u5B50\u8282\u70B9\u5B58\u5728\r\n        if (childIndex >= data.length) return;\r\n        // \u5DE6\u5B50\u8282\u70B9\u8D85\u8FC7\u4E0A\u9650\r\n        if (typeof downIndex === 'number' && childIndex > downIndex) return;\r\n\r\n        // \u66F4\u65B0\u7236\u8282\u70B9\u5DE6\u53F3\u5B50\u8282\u70B9\u7684priority\r\n        if (priority && typeof data[0] === 'object') {\r\n            const parentNode = data[parentIndex] as DataObj;\r\n            const leftNode = data[childIndex] as DataObj;\r\n            const rightNode = data[childIndex + 1] as DataObj;\r\n            parentPriority = parentNode[priority];\r\n            leftPriority = leftNode[priority];\r\n            maxChildPriority = leftPriority;\r\n            rightNode ? (rightPriority = rightNode[priority]) : null;\r\n        } else {\r\n            parentPriority = data[parentIndex] as number;\r\n            leftPriority = data[childIndex] as number;\r\n            maxChildPriority = leftPriority;\r\n            data[childIndex + 1] ? (rightPriority = data[childIndex + 1] as number) : null;\r\n        }\r\n\r\n        // \u5728\u53F3\u5B50\u8282\u70B9\u4F18\u5148\u7EA7\u5927\u4E8E\u5DE6\u5B50\u8282\u70B9\u4F18\u5148\u7EA7\u7684\u60C5\u51B5\u4E0B\u66F4\u65B0maxChildPriority\r\n        if (data[childIndex + 1] && rightPriority > leftPriority) {\r\n            if (\r\n                typeof downIndex === 'undefined' ||\r\n                (typeof downIndex === 'number' && childIndex + 1 <= downIndex)\r\n            ) {\r\n                maxChildIndex = childIndex + 1;\r\n                maxChildPriority = rightPriority;\r\n            }\r\n        }\r\n\r\n        // \u5728\u7236\u8282\u70B9\u4F18\u5148\u7EA7\u5C0F\u4E8E\u6700\u5927\u5B50\u8282\u70B9\u4F18\u5148\u7EA7\u7684\u60C5\u51B5\u4E0B\u9700\u8981\u9012\u5F52\u5904\u7406\r\n        if (parentPriority < maxChildPriority) {\r\n            const temp = data[parentIndex];\r\n            data[parentIndex] = data[maxChildIndex];\r\n            data[maxChildIndex] = temp;\r\n            // \u9012\u5F52\u5904\u7406\u5B50\u8282\u70B9\r\n            Heap.adjustBigHeap(maxChildIndex, data, priority, downIndex);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u8C03\u6574\u4E3A\u5C0F\u5806\r\n     * @param parentIndex   \u8C03\u6574\u7684\u7236\u8282\u70B9\u7D22\u5F15\r\n     * @param data          \u8C03\u6574\u7684\u5806\u7684\u7269\u7406\u5B58\u50A8\r\n     * @param priority      \u6570\u636E\u4F18\u5148\u7EA7\u7684key\u503C\r\n     */\r\n    static adjustSmallHeap(\r\n        parentIndex: number,\r\n        data: HeapData,\r\n        priority: string,\r\n        downIndex?: number,\r\n    ) {\r\n        const childIndex = 2 * parentIndex + 1;\r\n        let parentPriority = 0;\r\n        let leftPriority = 0;\r\n        let rightPriority = 0;\r\n\r\n        let minChildIndex = childIndex;\r\n        let minChildPriority = 0;\r\n\r\n        // \u5411\u4E0B\u8C03\u6574\u5806\u4E34\u754C\u6761\u4EF6\u4E3A\u5DE6\u5B50\u8282\u70B9\u5B58\u5728\r\n        if (childIndex >= data.length) return;\r\n        // \u5DE6\u5B50\u8282\u70B9\u8D85\u8FC7\u4E0A\u9650\r\n        if (typeof downIndex === 'number' && childIndex > downIndex) return;\r\n\r\n        // \u66F4\u65B0\u7236\u8282\u70B9\u5DE6\u53F3\u5B50\u8282\u70B9\u7684priority\r\n        if (priority && typeof data[0] === 'object') {\r\n            const parentNode = data[parentIndex] as DataObj;\r\n            const leftNode = data[childIndex] as DataObj;\r\n            const rightNode = data[childIndex + 1] as DataObj;\r\n            parentPriority = parentNode[priority];\r\n            leftPriority = leftNode[priority];\r\n            minChildPriority = leftPriority;\r\n            rightNode ? (rightPriority = rightNode[priority]) : null;\r\n        } else {\r\n            parentPriority = data[parentIndex] as number;\r\n            leftPriority = data[childIndex] as number;\r\n            minChildPriority = leftPriority;\r\n            data[childIndex + 1] ? (rightPriority = data[childIndex + 1] as number) : null;\r\n        }\r\n\r\n        // \u5728\u53F3\u5B50\u8282\u70B9\u4F18\u5148\u7EA7\u5C0F\u4E8E\u5DE6\u5B50\u8282\u70B9\u4F18\u5148\u7EA7\u7684\u60C5\u51B5\u4E0B\u66F4\u65B0minChildPriority\r\n        if (data[childIndex + 1] && rightPriority < leftPriority) {\r\n            if (\r\n                typeof downIndex === 'undefined' ||\r\n                (typeof downIndex === 'number' && childIndex + 1 <= downIndex)\r\n            ) {\r\n                minChildIndex = childIndex + 1;\r\n                minChildPriority = rightPriority;\r\n            }\r\n        }\r\n\r\n        // \u5728\u7236\u8282\u70B9\u4F18\u5148\u7EA7\u5C0F\u4E8E\u6700\u5927\u5B50\u8282\u70B9\u4F18\u5148\u7EA7\u7684\u60C5\u51B5\u4E0B\u9700\u8981\u9012\u5F52\u5904\u7406\r\n        if (parentPriority > minChildPriority) {\r\n            const temp = data[parentIndex];\r\n            data[parentIndex] = data[minChildIndex];\r\n            data[minChildIndex] = temp;\r\n            // \u9012\u5F52\u5904\u7406\u5B50\u8282\u70B9\r\n            Heap.adjustSmallHeap(minChildIndex, data, priority, downIndex);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u5927\u5806\u63D2\u5165\u5143\u7D20\u540E,\u9700\u8981\u5411\u4E0A\u9012\u5F52\u66F4\u65B0\u5143\u7D20\u4F4D\u7F6E\r\n     * @param index     \u5F85\u66F4\u65B0\u5143\u7D20\u7684\u7D22\u5F15\r\n     * @param data      \u8C03\u6574\u7684\u5806\u7684\u7269\u7406\u5B58\u50A8\r\n     * @param priority  \u6570\u636E\u4F18\u5148\u7EA7\u7684key\u503C\r\n     */\r\n    static adjustInsertBigHeap(index: number, data: HeapData, priority: string) {\r\n        const parentIndex = Math.floor((index - 1) / 2);\r\n        let curPriority = 0;\r\n        let parentPriority = 0;\r\n\r\n        // \u5411\u4E0A\u8C03\u6574\u5806\u4E34\u754C\u6761\u4EF6\u4E3A\u8282\u70B9\u6570\u5C0F\u4E8E\u4E24\u4E2A\r\n        if (parentIndex < 2) return;\r\n\r\n        // \u66F4\u65B0\u7236\u8282\u70B9\u548C\u5F53\u524D\u8282\u70B9\u4F18\u5148\u7EA7\r\n        if (priority && typeof data[0] === 'object') {\r\n            const parentNode = data[parentIndex] as DataObj;\r\n            const curNode = data[index] as DataObj;\r\n            parentPriority = parentNode[priority];\r\n            curPriority = curNode[priority];\r\n        } else {\r\n            parentPriority = data[parentIndex] as number;\r\n            curPriority = data[index] as number;\r\n        }\r\n\r\n        // \u5927\u5806,\u4EC5\u5F53\u5F53\u524D\u8282\u70B9\u4F18\u5148\u7EA7\u5927\u4E8E\u7236\u8282\u70B9\u65F6,\u9700\u8981\u5411\u4E0A\u8C03\u6574\r\n        if (curPriority > parentPriority) {\r\n            const temp = data[parentIndex];\r\n            data[parentIndex] = data[index];\r\n            data[index] = temp;\r\n            Heap.adjustInsertBigHeap(parentIndex, data, priority);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u5C0F\u5806\u63D2\u5165\u5143\u7D20\u540E,\u9700\u8981\u5411\u4E0A\u9012\u5F52\u66F4\u65B0\u5143\u7D20\u4F4D\u7F6E\r\n     * @param index     \u5F85\u66F4\u65B0\u5143\u7D20\u7684\u7D22\u5F15\r\n     * @param data      \u8C03\u6574\u7684\u5806\u7684\u7269\u7406\u5B58\u50A8\r\n     * @param priority  \u6570\u636E\u4F18\u5148\u7EA7\u7684key\u503C\r\n     */\r\n    static adjustInsertSmallHeap(index: number, data: HeapData, priority: string) {\r\n        const parentIndex = Math.floor((index - 1) / 2);\r\n        let curPriority = 0;\r\n        let parentPriority = 0;\r\n\r\n        // \u5411\u4E0A\u8C03\u6574\u5806\u4E34\u754C\u6761\u4EF6\u4E3A\u8282\u70B9\u6570\u5C0F\u4E8E\u4E24\u4E2A\r\n        if (parentIndex <= 2) return;\r\n\r\n        // \u66F4\u65B0\u7236\u8282\u70B9\u548C\u5F53\u524D\u8282\u70B9\u4F18\u5148\u7EA7\r\n        if (priority && typeof data[0] === 'object') {\r\n            const parentNode = data[parentIndex] as DataObj;\r\n            const curNode = data[index] as DataObj;\r\n            parentPriority = parentNode[priority];\r\n            curPriority = curNode[priority];\r\n        } else {\r\n            parentPriority = data[parentIndex] as number;\r\n            curPriority = data[index] as number;\r\n        }\r\n\r\n        // \u5C0F\u5806,\u4EC5\u5F53\u5F53\u524D\u8282\u70B9\u5C0F\u4E8E\u7236\u8282\u70B9\u65F6,\u9700\u8981\u5411\u4E0A\u8C03\u6574\r\n        if (curPriority < parentPriority) {\r\n            const temp = data[parentIndex];\r\n            data[parentIndex] = data[index];\r\n            data[index] = temp;\r\n            Heap.adjustInsertSmallHeap(parentIndex, data, priority);\r\n        }\r\n    }\r\n\r\n    // \u4F9D\u636Edata&small\u521D\u59CB\u5316\u5806\r\n    initHeap() {\r\n        if (this.data.length < 2) {\r\n            return;\r\n        } else {\r\n            // \u83B7\u53D6\u5C3E\u8282\u70B9\u7684\u7236\u8282\u70B9\u7D22\u5F15\r\n            let i = Math.floor((this.data.length - 2) / 2);\r\n            // \u4F9D\u6B21\u5BF9i\u4EE5\u4E0B\u7684\u8282\u70B9\u8FDB\u884C\u987A\u5E8F\u8C03\u6574\r\n            while (i >= 0) {\r\n                this.small\r\n                    ? Heap.adjustSmallHeap(i, this.data, this.priority)\r\n                    : Heap.adjustBigHeap(i, this.data, this.priority);\r\n                i--;\r\n            }\r\n            // \u8FD4\u56DE\u5B9E\u4F8B\u81EA\u8EAB,\u4EE5\u652F\u6301\u94FE\u5F0F\u64CD\u4F5C\r\n            return this;\r\n        }\r\n    }\r\n\r\n    // \u5355\u4E2A\u5143\u7D20\u63D2\u5165\r\n    insertElement(item: DataItem) {\r\n        // \u5BB9\u9519\u5904\u7406\r\n        if (typeof item !== 'number' && typeof item !== 'object') {\r\n            return console.error('insert error: the element must be a number or object!');\r\n        }\r\n        if (typeof item === 'object' && !item[this.priority]) {\r\n            return console.error(\r\n                'insert error: the element must has priority key when as a object!',\r\n            );\r\n        }\r\n\r\n        /**\r\n         * \u63D2\u5165\u5806\u6838\u5FC3\u601D\u8DEF\r\n         * 1. \u5C06\u5143\u7D20\u63D2\u5165\u81F3\u5806\u5C3E\u90E8\r\n         * 2. \u5C06\u5143\u7D20\u5411\u4E0A\u9012\u5F52\u664B\u5347\r\n         */\r\n        this.length = this.data.push(item);\r\n        if (this.length > 1) {\r\n            if (this.small) {\r\n                Heap.adjustInsertSmallHeap(this.length - 1, this.data, this.priority);\r\n            } else {\r\n                Heap.adjustInsertBigHeap(this.length - 1, this.data, this.priority);\r\n            }\r\n        }\r\n        // \u8FD4\u56DE\u5B9E\u4F8B\u81EA\u8EAB,\u4EE5\u652F\u6301\u94FE\u5F0F\u64CD\u4F5C\r\n        return this;\r\n    }\r\n\r\n    // \u6279\u91CF\u63D2\u5165\r\n    insertElements(numArr: HeapData) {\r\n        if (Array.isArray(numArr)) {\r\n            for (let i = 0, l = numArr.length; i < l; i++) {\r\n                if (typeof numArr[i] === 'number') {\r\n                    this.insertElement(numArr[i]);\r\n                } else {\r\n                    console.error(`insert error: the index ${i} must be a number!`);\r\n                }\r\n            }\r\n            return this;\r\n        } else {\r\n            console.error('insert error: the elements must be a number array!');\r\n        }\r\n    }\r\n\r\n    // \u5806\u9876\u5F39\u51FA\u4E00\u4E2A\u5143\u7D20\r\n    popElement() {\r\n        let result: null | number | DataObj = null;\r\n        const data = this.data;\r\n\r\n        if (!data.length) {\r\n            console.error('popMax error: heap is empty now!');\r\n        } else if (data.length === 1) {\r\n            result = data.shift() as DataObj;\r\n        } else {\r\n            /**\r\n             * \u51FA\u5806\u6838\u5FC3\u601D\u8DEF\r\n             * 1. \u5C06\u9996\u5C3E\u5143\u7D20\u4EA4\u6362\r\n             * 2. \u5C3E\u90E8\u5143\u7D20\u51FA\u5806\r\n             * 3. \u9996\u90E8\u5143\u7D20\u9012\u5F52\u5411\u4E0B\u8C03\u6574\u987A\u5E8F\r\n             */\r\n            result = data[0];\r\n            data[0] = data[data.length - 1];\r\n            data.pop();\r\n\r\n            this.small\r\n                ? Heap.adjustSmallHeap(0, this.data, this.priority)\r\n                : Heap.adjustBigHeap(0, this.data, this.priority);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // \u5806\u9876\u5F39\u51FA\u591A\u4E2A\u5143\u7D20\r\n    popElements(count: number) {\r\n        const results = [];\r\n\r\n        if (typeof count !== 'number' || count <= 0) {\r\n            console.error('popMaxs error: argument count must be a integer greater than 0!');\r\n        } else if (count > this.data.length) {\r\n            console.error('popMaxs error: argument count greater than heap size!');\r\n        } else {\r\n            for (let i = 0; i < count; i++) {\r\n                results.push(this.popElement());\r\n            }\r\n        }\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * \u5806\u6392\u5E8F\u6838\u5FC3:\r\n     *  1. \u5229\u7528\u63D2\u5165\u6392\u5E8F\u601D\u60F3,\u8FDB\u884Clength-1\u6B21\u9996\u5C3E\u5143\u7D20\u987A\u5E8F\u4EA4\u6362\r\n     *  2. \u6BCF\u6B21\u4EA4\u6362\u9700\u8981\u9012\u5F52\u8C03\u6574\u5806\u9876\u7684\u4F4D\u7F6E\r\n     */\r\n    sort() {\r\n        const data = this.data;\r\n        let len = data.length;\r\n\r\n        /**\r\n         * \u5C0F\u5806\u6392\u5E8F: \u4EA7\u751F\u964D\u5E8F,\u4F18\u5148\u7EA7\u9AD8\u7684\u53EF\u4EE5pop\u51FA\u6765\r\n         * \u5927\u5806\u6392\u5E8F: \u4EA7\u751F\u5347\u5E8F,\u4F18\u5148\u7EA7\u9AD8\u7684\u53EF\u4EE5pop\u51FA\u6765\r\n         */\r\n        while (len > 1) {\r\n            // \u4EA4\u6362\u987A\u5E8F\r\n            const temp = data[0];\r\n            data[0] = data[len - 1];\r\n            data[len - 1] = temp;\r\n\r\n            // \u8C03\u6574\u6839\u8282\u70B9\u4F4D\u7F6E\r\n            this.small\r\n                ? Heap.adjustSmallHeap(0, data, this.priority, len - 2)\r\n                : Heap.adjustBigHeap(0, data, this.priority, len - 2);\r\n\r\n            len--;\r\n        }\r\n        return this;\r\n    }\r\n}\r\n\r\nconst global: MyGlobal = window;\r\nglobal.heap = new Heap([3, 10, 19, 8, 6]);\r\n\r\nexport default Heap;\r\n", "class Stack {\r\n    constructor() {\r\n        console.log('Stack');\r\n    }\r\n\r\n    add(num1: number, num2: number) {\r\n        return num1 + num2;\r\n    }\r\n}\r\n\r\nexport default Stack;\r\n", "import Heap from './heap/index';\r\nimport Stack from './stack/index';\r\n\r\nexport default {\r\n    Heap,\r\n    Stack,\r\n};\r\n\n                        if (typeof window) {\n                            window.BDS = {\n                                Heap,Stack\n                            }\n                        }\n                    "],
  "mappings": "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",
  "names": []
}
