{
  "version": 3,
  "sources": ["../src/heap/index.ts", "../src/stack/index.ts", "../src/index.ts"],
  "sourcesContent": ["import { heapData, heapDataArguments } from './type';\r\nclass Heap {\r\n    public length: number;\r\n    public small: boolean;\r\n    public data: heapData;\r\n\r\n    constructor(data: heapDataArguments, small?: boolean) {\r\n        this.small = Boolean(small);\r\n\r\n        if (data && data.length) {\r\n            this.length = data.length;\r\n            this.data = data;\r\n            this.initHeap();\r\n        } else {\r\n            this.length = 0;\r\n            this.data = [];\r\n        }\r\n\r\n        Object.defineProperty(this, 'small', {\r\n            get() {\r\n                return Boolean(small);\r\n            },\r\n            set(val) {\r\n                small = Boolean(val);\r\n                this.initHeap();\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * \u8C03\u6574\u4E3A\u5927\u5806\r\n     * @param parentIndex   \u8C03\u6574\u7684\u7236\u8282\u70B9\u7D22\u5F15\r\n     * @param data          \u8C03\u6574\u7684\u5806\u7684\u7269\u7406\u5B58\u50A8\r\n     */\r\n    static adjustBigHeap(parentIndex: number, data: heapData) {\r\n        let childIndex = 2 * parentIndex + 1;\r\n\r\n        // \u5411\u4E0B\u8C03\u6574\u5806\u4E34\u754C\u6761\u4EF6\u4E3A\u5DE6\u5B50\u8282\u70B9\u5B58\u5728\r\n        if (childIndex >= data.length) return;\r\n\r\n        // \u5728\u53F3\u5B50\u8282\u70B9\u5927\u4E8E\u5DE6\u5B50\u8282\u70B9\u7684\u60C5\u51B5\u4E0B\u66F4\u65B0childIndex\u4E3A\u53F3\u5B50\u8282\u70B9\u7684\u7D22\u5F15\r\n        if (data[childIndex] && data[childIndex + 1] && data[childIndex + 1] > data[childIndex]) {\r\n            childIndex = childIndex + 1;\r\n        }\r\n\r\n        // \u5728\u7236\u8282\u70B9\u5C0F\u4E8E\u5B50\u8282\u70B9\u7684\u60C5\u51B5\u4E0B\u9700\u8981\u9012\u5F52\u5904\u7406\r\n        if (data[parentIndex] < data[childIndex]) {\r\n            const temp = data[parentIndex];\r\n            data[parentIndex] = data[childIndex];\r\n            data[childIndex] = temp;\r\n            // \u9012\u5F52\u5904\u7406\u5B50\u8282\u70B9\r\n            Heap.adjustBigHeap(childIndex, data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u8C03\u6574\u4E3A\u5C0F\u5806\r\n     * @param parentIndex   \u8C03\u6574\u7684\u7236\u8282\u70B9\u7D22\u5F15\r\n     * @param data          \u8C03\u6574\u7684\u5806\u7684\u7269\u7406\u5B58\u50A8\r\n     */\r\n    static adjustSmallHeap(parentIndex: number, data: heapData) {\r\n        let childIndex = 2 * parentIndex + 1;\r\n\r\n        // \u5411\u4E0B\u8C03\u6574\u5806\u4E34\u754C\u6761\u4EF6\u4E3A\u5B50\u8282\u70B9\u5B58\u5728\r\n        if (childIndex >= data.length) return;\r\n\r\n        // \u5728\u53F3\u5B50\u8282\u70B9\u5C0F\u4E8E\u5DE6\u5B50\u8282\u70B9\u7684\u60C5\u51B5\u4E0B\u66F4\u65B0childIndex\u4E3A\u53F3\u5B50\u8282\u70B9\u7684\u7D22\u5F15\r\n        if (data[childIndex] && data[childIndex + 1] && data[childIndex + 1] < data[childIndex]) {\r\n            childIndex = childIndex + 1;\r\n        }\r\n\r\n        // \u5728\u7236\u8282\u70B9\u5927\u4E8E\u5B50\u8282\u70B9\u7684\u60C5\u51B5\u4E0B\u9700\u8981\u9012\u5F52\u5904\u7406\r\n        if (data[parentIndex] > data[childIndex]) {\r\n            const temp = data[parentIndex];\r\n            data[parentIndex] = data[childIndex];\r\n            data[childIndex] = temp;\r\n            // \u9012\u5F52\u5904\u7406\u5B50\u8282\u70B9\r\n            Heap.adjustSmallHeap(childIndex, data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u5927\u5806\u63D2\u5165\u5143\u7D20\u540E,\u9700\u8981\u5411\u4E0A\u9012\u5F52\u66F4\u65B0\u5143\u7D20\u4F4D\u7F6E\r\n     * @param index \u5F85\u66F4\u65B0\u5143\u7D20\u7684\u7D22\u5F15\r\n     * @param data  \u8C03\u6574\u7684\u5806\u7684\u7269\u7406\u5B58\u50A8\r\n     */\r\n    static adjustInsertBigHeap(index: number, data: heapData) {\r\n        const parentIndex = Math.floor((index - 1) / 2);\r\n\r\n        // \u5411\u4E0A\u8C03\u6574\u5806\u4E34\u754C\u6761\u4EF6\u4E3A\u7236\u8282\u70B9\u5B58\u5728\r\n        if (parentIndex < 0) return;\r\n\r\n        // \u5927\u5806,\u4EC5\u5F53\u5B50\u8282\u70B9\u5927\u4E8E\u7236\u8282\u70B9\u65F6,\u9700\u8981\u5411\u4E0A\u8C03\u6574\r\n        if (data[index] > data[parentIndex]) {\r\n            const temp = data[parentIndex];\r\n            data[parentIndex] = data[index];\r\n            data[index] = temp;\r\n            Heap.adjustInsertBigHeap(parentIndex, data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u5C0F\u5806\u63D2\u5165\u5143\u7D20\u540E,\u9700\u8981\u5411\u4E0A\u9012\u5F52\u66F4\u65B0\u5143\u7D20\u4F4D\u7F6E\r\n     * @param index \u5F85\u66F4\u65B0\u5143\u7D20\u7684\u7D22\u5F15\r\n     * @param data  \u8C03\u6574\u7684\u5806\u7684\u7269\u7406\u5B58\u50A8\r\n     */\r\n    static adjustInsertSmallHeap(index: number, data: heapData) {\r\n        const parentIndex = Math.floor((index - 1) / 2);\r\n\r\n        // \u5411\u4E0A\u8C03\u6574\u5806\u4E34\u754C\u6761\u4EF6\u4E3A\u7236\u8282\u70B9\u5B58\u5728\r\n        if (parentIndex < 0) return;\r\n\r\n        // \u5C0F\u5806,\u4EC5\u5F53\u5B50\u8282\u70B9\u5C0F\u4E8E\u7236\u8282\u70B9\u65F6,\u9700\u8981\u5411\u4E0A\u8C03\u6574\r\n        if (data[index] < data[parentIndex]) {\r\n            const temp = data[parentIndex];\r\n            data[parentIndex] = data[index];\r\n            data[index] = temp;\r\n            Heap.adjustInsertSmallHeap(parentIndex, data);\r\n        }\r\n    }\r\n\r\n    // \u4F9D\u636Edata&small\u521D\u59CB\u5316\u5806\r\n    initHeap() {\r\n        if (!this.data.length) {\r\n            return;\r\n        } else {\r\n            // \u83B7\u53D6\u5C3E\u8282\u70B9\u7684\u7236\u8282\u70B9\u7D22\u5F15\r\n            let i = Math.floor((this.data.length - 2) / 2);\r\n            // \u4F9D\u6B21\u5BF9i\u4EE5\u4E0B\u7684\u8282\u70B9\u8FDB\u884C\u987A\u5E8F\u8C03\u6574\r\n            while (i >= 0) {\r\n                this.small ? Heap.adjustSmallHeap(i, this.data) : Heap.adjustBigHeap(i, this.data);\r\n                i--;\r\n            }\r\n            // \u8FD4\u56DE\u5B9E\u4F8B\u81EA\u8EAB,\u4EE5\u652F\u6301\u94FE\u5F0F\u64CD\u4F5C\r\n            return this;\r\n        }\r\n    }\r\n\r\n    // \u5355\u4E2A\u5143\u7D20\u63D2\u5165\r\n    insertElement(num: number) {\r\n        if (typeof num !== 'number') {\r\n            console.error('insert error: the element must be a number!');\r\n        } else {\r\n            this.length = this.data.push(num);\r\n\r\n            if (this.length > 1) {\r\n                if (this.small) {\r\n                    Heap.adjustInsertSmallHeap(this.length - 1, this.data);\r\n                } else {\r\n                    Heap.adjustInsertBigHeap(this.length - 1, this.data);\r\n                }\r\n            }\r\n            // \u8FD4\u56DE\u5B9E\u4F8B\u81EA\u8EAB,\u4EE5\u652F\u6301\u94FE\u5F0F\u64CD\u4F5C\r\n            return this;\r\n        }\r\n    }\r\n\r\n    // \u6279\u91CF\u63D2\u5165\r\n    insertElements(numArr: number[]) {\r\n        if (Array.isArray(numArr)) {\r\n            for (let i = 0, l = numArr.length; i < l; i++) {\r\n                if (typeof numArr[i] === 'number') {\r\n                    this.insertElement(numArr[i]);\r\n                } else {\r\n                    console.error(`insert error: the index ${i} must be a number!`);\r\n                }\r\n            }\r\n            return this;\r\n        } else {\r\n            console.error('insert error: the elements must be a number array!');\r\n        }\r\n    }\r\n\r\n    // \u5355\u6B21\u5806\u9876\u51FA\u5806\r\n    popMax() {\r\n        let result: null | number = null;\r\n\r\n        if (!this.data.length) {\r\n            console.error('popMax error: heap is empty now!');\r\n        } else {\r\n            result = this.data.shift() as number;\r\n\r\n            if (this.data.length > 1) {\r\n                const last = this.data.pop() as number;\r\n                // \u5C06\u5C3E\u90E8\u5143\u7D20\u79FB\u52A8\u81F3\u9996\u90E8\r\n                this.data.unshift(last);\r\n                // \u5411\u4E0B\u8C03\u6574\u6839\u8282\u70B9\u5143\u7D20\r\n                this.small ? Heap.adjustSmallHeap(0, this.data) : Heap.adjustBigHeap(0, this.data);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // \u591A\u6B21\u5806\u9876\u51FA\u5806\r\n    popMaxs(count: number) {\r\n        const results = [];\r\n\r\n        if (typeof count !== 'number' || count <= 0) {\r\n            console.error('popMaxs error: argument count must be a integer greater than 0!');\r\n        } else if (count > this.data.length) {\r\n            console.error('popMaxs error: argument count greater than heap size!');\r\n        } else {\r\n            for (let i = 0; i < count; i++) {\r\n                results.push(this.popMax());\r\n            }\r\n        }\r\n        return results;\r\n    }\r\n}\r\n\r\nconst global: MyGlobal = window;\r\nglobal.heap = new Heap([3, 10, 19, 8, 6]);\r\n\r\nexport default Heap;\r\n", "class Stack {\r\n    constructor() {\r\n        console.log('Stack');\r\n    }\r\n\r\n    add(num1: number, num2: number) {\r\n        return num1 + num2;\r\n    }\r\n}\r\n\r\nexport default Stack;\r\n", "import Heap from './heap/index';\r\nimport Stack from './stack/index';\r\n\r\nexport default {\r\n    Heap,\r\n    Stack,\r\n};\r\n\n                        if (typeof window) {\n                            window.BDS = {\n                                Heap,Stack\n                            }\n                        }\n                    "],
  "mappings": "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",
  "names": []
}
