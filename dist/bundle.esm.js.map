{
  "version": 3,
  "sources": ["../src/heap/index.ts", "../src/stack/index.ts", "../src/index.ts"],
  "sourcesContent": ["import { DataObj, DataItem, HeapData, HeapDataArguments } from './type';\r\n\r\nclass Heap {\r\n    public data: HeapData;\r\n    public length: number;\r\n    public priority: string;\r\n    public small: boolean;\r\n\r\n    /**\r\n     * @param data      \u6570\u636E\u6E90\r\n     * @param small     \u5F53\u524D\u5806\u662F\u5426\u4E3A\u5C0F\u5806\r\n     * @param priority  \u5F53data\u4E2D\u6BCF\u4E00\u9879\u4E3A\u5BF9\u8C61\u65F6,\u6B64\u5B57\u7B26\u4E32\u4EE3\u6307\u5176\u4E2D\u53EF\u4EE5\u51B3\u5B9A\u5806\u987A\u5E8F\u7684key\r\n     */\r\n    constructor(data: HeapDataArguments, small = false, priority?: string) {\r\n        small = this.small = Boolean(small);\r\n        priority = this.priority = priority ? priority : '';\r\n\r\n        if (data && data.length) {\r\n            this.length = data.length;\r\n            this.data = data;\r\n            this.initHeap();\r\n        } else {\r\n            this.length = 0;\r\n            this.data = [];\r\n        }\r\n\r\n        Object.defineProperties(this, {\r\n            small: {\r\n                get() {\r\n                    return small;\r\n                },\r\n                set(val) {\r\n                    if (val && Boolean(val) !== small) {\r\n                        small = Boolean(val);\r\n                        this.initHeap();\r\n                    }\r\n                },\r\n            },\r\n            priority: {\r\n                get() {\r\n                    return priority;\r\n                },\r\n                set(val) {\r\n                    if (val && String(val) !== priority) {\r\n                        priority = String(val);\r\n                        this.initHeap();\r\n                    }\r\n                },\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * \u8C03\u6574\u4E3A\u5927\u5806\r\n     * @param parentIndex   \u8C03\u6574\u7684\u7236\u8282\u70B9\u7D22\u5F15\r\n     * @param data          \u8C03\u6574\u7684\u5806\u7684\u7269\u7406\u5B58\u50A8\r\n     * @param priority      \u6570\u636E\u4F18\u5148\u7EA7\u7684key\u503C\r\n     */\r\n    static adjustBigHeap(parentIndex: number, data: HeapData, priority: string) {\r\n        const childIndex = 2 * parentIndex + 1;\r\n        let parentPriority = 0;\r\n        let leftPriority = 0;\r\n        let rightPriority = 0;\r\n\r\n        let maxChildIndex = childIndex;\r\n        let maxChildPriority = 0;\r\n\r\n        // \u5411\u4E0B\u8C03\u6574\u5806\u4E34\u754C\u6761\u4EF6\u4E3A\u5DE6\u5B50\u8282\u70B9\u5B58\u5728\r\n        if (childIndex >= data.length) return;\r\n\r\n        // \u66F4\u65B0\u7236\u8282\u70B9\u5DE6\u53F3\u5B50\u8282\u70B9\u7684priority\r\n        if (priority && typeof data[0] === 'object') {\r\n            const parentNode = data[parentIndex] as DataObj;\r\n            const leftNode = data[childIndex] as DataObj;\r\n            const rightNode = data[childIndex + 1] as DataObj;\r\n            parentPriority = parentNode[priority];\r\n            leftPriority = leftNode[priority];\r\n            maxChildPriority = leftPriority;\r\n            rightNode ? (rightPriority = rightNode[priority]) : null;\r\n        } else {\r\n            parentPriority = data[parentIndex] as number;\r\n            leftPriority = data[childIndex] as number;\r\n            maxChildPriority = leftPriority;\r\n            data[childIndex + 1] ? (rightPriority = data[childIndex + 1] as number) : null;\r\n        }\r\n\r\n        // \u5728\u53F3\u5B50\u8282\u70B9\u4F18\u5148\u7EA7\u5927\u4E8E\u5DE6\u5B50\u8282\u70B9\u4F18\u5148\u7EA7\u7684\u60C5\u51B5\u4E0B\u66F4\u65B0maxChildPriority\r\n        if (data[childIndex + 1] && rightPriority > leftPriority) {\r\n            maxChildIndex = childIndex + 1;\r\n            maxChildPriority = rightPriority;\r\n        }\r\n\r\n        // \u5728\u7236\u8282\u70B9\u4F18\u5148\u7EA7\u5C0F\u4E8E\u6700\u5927\u5B50\u8282\u70B9\u4F18\u5148\u7EA7\u7684\u60C5\u51B5\u4E0B\u9700\u8981\u9012\u5F52\u5904\u7406\r\n        if (parentPriority < maxChildPriority) {\r\n            const temp = data[parentIndex];\r\n            data[parentIndex] = data[maxChildIndex];\r\n            data[maxChildIndex] = temp;\r\n            // \u9012\u5F52\u5904\u7406\u5B50\u8282\u70B9\r\n            Heap.adjustBigHeap(maxChildIndex, data, priority);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u8C03\u6574\u4E3A\u5C0F\u5806\r\n     * @param parentIndex   \u8C03\u6574\u7684\u7236\u8282\u70B9\u7D22\u5F15\r\n     * @param data          \u8C03\u6574\u7684\u5806\u7684\u7269\u7406\u5B58\u50A8\r\n     * @param priority      \u6570\u636E\u4F18\u5148\u7EA7\u7684key\u503C\r\n     */\r\n    static adjustSmallHeap(parentIndex: number, data: HeapData, priority: string) {\r\n        const childIndex = 2 * parentIndex + 1;\r\n        let parentPriority = 0;\r\n        let leftPriority = 0;\r\n        let rightPriority = 0;\r\n\r\n        let minChildIndex = childIndex;\r\n        let minChildPriority = 0;\r\n\r\n        // \u5411\u4E0B\u8C03\u6574\u5806\u4E34\u754C\u6761\u4EF6\u4E3A\u5DE6\u5B50\u8282\u70B9\u5B58\u5728\r\n        if (childIndex >= data.length) return;\r\n\r\n        // \u66F4\u65B0\u7236\u8282\u70B9\u5DE6\u53F3\u5B50\u8282\u70B9\u7684priority\r\n        if (priority && typeof data[0] === 'object') {\r\n            const parentNode = data[parentIndex] as DataObj;\r\n            const leftNode = data[childIndex] as DataObj;\r\n            const rightNode = data[childIndex + 1] as DataObj;\r\n            parentPriority = parentNode[priority];\r\n            leftPriority = leftNode[priority];\r\n            minChildPriority = leftPriority;\r\n            rightNode ? (rightPriority = rightNode[priority]) : null;\r\n        } else {\r\n            parentPriority = data[parentIndex] as number;\r\n            leftPriority = data[childIndex] as number;\r\n            minChildPriority = leftPriority;\r\n            data[childIndex + 1] ? (rightPriority = data[childIndex + 1] as number) : null;\r\n        }\r\n\r\n        // \u5728\u53F3\u5B50\u8282\u70B9\u4F18\u5148\u7EA7\u5927\u4E8E\u5DE6\u5B50\u8282\u70B9\u4F18\u5148\u7EA7\u7684\u60C5\u51B5\u4E0B\u66F4\u65B0maxChildPriority\r\n        if (data[childIndex + 1] && rightPriority > leftPriority) {\r\n            minChildIndex = childIndex + 1;\r\n            minChildPriority = rightPriority;\r\n        }\r\n\r\n        // \u5728\u7236\u8282\u70B9\u4F18\u5148\u7EA7\u5C0F\u4E8E\u6700\u5927\u5B50\u8282\u70B9\u4F18\u5148\u7EA7\u7684\u60C5\u51B5\u4E0B\u9700\u8981\u9012\u5F52\u5904\u7406\r\n        if (parentPriority < minChildPriority) {\r\n            const temp = data[parentIndex];\r\n            data[parentIndex] = data[minChildIndex];\r\n            data[minChildIndex] = temp;\r\n            // \u9012\u5F52\u5904\u7406\u5B50\u8282\u70B9\r\n            Heap.adjustBigHeap(minChildIndex, data, priority);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u5927\u5806\u63D2\u5165\u5143\u7D20\u540E,\u9700\u8981\u5411\u4E0A\u9012\u5F52\u66F4\u65B0\u5143\u7D20\u4F4D\u7F6E\r\n     * @param index     \u5F85\u66F4\u65B0\u5143\u7D20\u7684\u7D22\u5F15\r\n     * @param data      \u8C03\u6574\u7684\u5806\u7684\u7269\u7406\u5B58\u50A8\r\n     * @param priority  \u6570\u636E\u4F18\u5148\u7EA7\u7684key\u503C\r\n     */\r\n    static adjustInsertBigHeap(index: number, data: HeapData, priority: string) {\r\n        const parentIndex = Math.floor((index - 1) / 2);\r\n        let curPriority = 0;\r\n        let parentPriority = 0;\r\n\r\n        // \u5411\u4E0A\u8C03\u6574\u5806\u4E34\u754C\u6761\u4EF6\u4E3A\u8282\u70B9\u6570\u5C0F\u4E8E\u4E24\u4E2A\r\n        if (parentIndex < 2) return;\r\n\r\n        // \u66F4\u65B0\u7236\u8282\u70B9\u548C\u5F53\u524D\u8282\u70B9\u4F18\u5148\u7EA7\r\n        if (priority && typeof data[0] === 'object') {\r\n            const parentNode = data[parentIndex] as DataObj;\r\n            const curNode = data[index] as DataObj;\r\n            parentPriority = parentNode[priority];\r\n            curPriority = curNode[priority];\r\n        } else {\r\n            parentPriority = data[parentIndex] as number;\r\n            curPriority = data[index] as number;\r\n        }\r\n\r\n        // \u5927\u5806,\u4EC5\u5F53\u5F53\u524D\u8282\u70B9\u4F18\u5148\u7EA7\u5927\u4E8E\u7236\u8282\u70B9\u65F6,\u9700\u8981\u5411\u4E0A\u8C03\u6574\r\n        if (curPriority > parentPriority) {\r\n            const temp = data[parentIndex];\r\n            data[parentIndex] = data[index];\r\n            data[index] = temp;\r\n            Heap.adjustInsertBigHeap(parentIndex, data, priority);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u5C0F\u5806\u63D2\u5165\u5143\u7D20\u540E,\u9700\u8981\u5411\u4E0A\u9012\u5F52\u66F4\u65B0\u5143\u7D20\u4F4D\u7F6E\r\n     * @param index     \u5F85\u66F4\u65B0\u5143\u7D20\u7684\u7D22\u5F15\r\n     * @param data      \u8C03\u6574\u7684\u5806\u7684\u7269\u7406\u5B58\u50A8\r\n     * @param priority  \u6570\u636E\u4F18\u5148\u7EA7\u7684key\u503C\r\n     */\r\n    static adjustInsertSmallHeap(index: number, data: HeapData, priority: string) {\r\n        const parentIndex = Math.floor((index - 1) / 2);\r\n        let curPriority = 0;\r\n        let parentPriority = 0;\r\n\r\n        // \u5411\u4E0A\u8C03\u6574\u5806\u4E34\u754C\u6761\u4EF6\u4E3A\u8282\u70B9\u6570\u5C0F\u4E8E\u4E24\u4E2A\r\n        if (parentIndex <= 2) return;\r\n\r\n        // \u66F4\u65B0\u7236\u8282\u70B9\u548C\u5F53\u524D\u8282\u70B9\u4F18\u5148\u7EA7\r\n        if (priority && typeof data[0] === 'object') {\r\n            const parentNode = data[parentIndex] as DataObj;\r\n            const curNode = data[index] as DataObj;\r\n            parentPriority = parentNode[priority];\r\n            curPriority = curNode[priority];\r\n        } else {\r\n            parentPriority = data[parentIndex] as number;\r\n            curPriority = data[index] as number;\r\n        }\r\n\r\n        // \u5C0F\u5806,\u4EC5\u5F53\u5F53\u524D\u8282\u70B9\u5C0F\u4E8E\u7236\u8282\u70B9\u65F6,\u9700\u8981\u5411\u4E0A\u8C03\u6574\r\n        if (curPriority < parentPriority) {\r\n            const temp = data[parentIndex];\r\n            data[parentIndex] = data[index];\r\n            data[index] = temp;\r\n            Heap.adjustInsertSmallHeap(parentIndex, data, priority);\r\n        }\r\n    }\r\n\r\n    // \u4F9D\u636Edata&small\u521D\u59CB\u5316\u5806\r\n    initHeap() {\r\n        if (this.data.length < 2) {\r\n            return;\r\n        } else {\r\n            // \u83B7\u53D6\u5C3E\u8282\u70B9\u7684\u7236\u8282\u70B9\u7D22\u5F15\r\n            let i = Math.floor((this.data.length - 2) / 2);\r\n            // \u4F9D\u6B21\u5BF9i\u4EE5\u4E0B\u7684\u8282\u70B9\u8FDB\u884C\u987A\u5E8F\u8C03\u6574\r\n            while (i >= 0) {\r\n                this.small\r\n                    ? Heap.adjustSmallHeap(i, this.data, this.priority)\r\n                    : Heap.adjustBigHeap(i, this.data, this.priority);\r\n                i--;\r\n            }\r\n            // \u8FD4\u56DE\u5B9E\u4F8B\u81EA\u8EAB,\u4EE5\u652F\u6301\u94FE\u5F0F\u64CD\u4F5C\r\n            return this;\r\n        }\r\n    }\r\n\r\n    // \u5355\u4E2A\u5143\u7D20\u63D2\u5165\r\n    insertElement(item: DataItem) {\r\n        // \u5BB9\u9519\u5904\u7406\r\n        if (typeof item !== 'number' && typeof item !== 'object') {\r\n            return console.error('insert error: the element must be a number or object!');\r\n        }\r\n        if (typeof item === 'object' && !item[this.priority]) {\r\n            return console.error(\r\n                'insert error: the element must has priority key when as a object!',\r\n            );\r\n        }\r\n\r\n        /**\r\n         * \u63D2\u5165\u5806\u6838\u5FC3\u601D\u8DEF\r\n         * 1. \u5C06\u5143\u7D20\u63D2\u5165\u81F3\u5806\u5C3E\u90E8\r\n         * 2. \u5C06\u5143\u7D20\u5411\u4E0A\u9012\u5F52\u664B\u5347\r\n         */\r\n        this.length = this.data.push(item);\r\n        if (this.length > 1) {\r\n            if (this.small) {\r\n                Heap.adjustInsertSmallHeap(this.length - 1, this.data, this.priority);\r\n            } else {\r\n                Heap.adjustInsertBigHeap(this.length - 1, this.data, this.priority);\r\n            }\r\n        }\r\n        // \u8FD4\u56DE\u5B9E\u4F8B\u81EA\u8EAB,\u4EE5\u652F\u6301\u94FE\u5F0F\u64CD\u4F5C\r\n        return this;\r\n    }\r\n\r\n    // \u6279\u91CF\u63D2\u5165\r\n    insertElements(numArr: HeapData) {\r\n        if (Array.isArray(numArr)) {\r\n            for (let i = 0, l = numArr.length; i < l; i++) {\r\n                if (typeof numArr[i] === 'number') {\r\n                    this.insertElement(numArr[i]);\r\n                } else {\r\n                    console.error(`insert error: the index ${i} must be a number!`);\r\n                }\r\n            }\r\n            return this;\r\n        } else {\r\n            console.error('insert error: the elements must be a number array!');\r\n        }\r\n    }\r\n\r\n    // \u5355\u6B21\u5806\u9876\u51FA\u5806\r\n    popMax() {\r\n        let result: null | number | DataObj = null;\r\n        const data = this.data;\r\n\r\n        if (!data.length) {\r\n            console.error('popMax error: heap is empty now!');\r\n        } else if (data.length === 1) {\r\n            result = data.shift() as DataObj;\r\n        } else {\r\n            /**\r\n             * \u51FA\u5806\u6838\u5FC3\u601D\u8DEF\r\n             * 1. \u5C06\u9996\u5C3E\u5143\u7D20\u4EA4\u6362\r\n             * 2. \u5C3E\u90E8\u5143\u7D20\u51FA\u5806\r\n             * 3. \u9996\u90E8\u5143\u7D20\u9012\u5F52\u5411\u4E0B\u8C03\u6574\u987A\u5E8F\r\n             */\r\n            result = data[0];\r\n            data[0] = data[data.length - 1];\r\n            data.pop();\r\n\r\n            this.small\r\n                ? Heap.adjustSmallHeap(0, this.data, this.priority)\r\n                : Heap.adjustBigHeap(0, this.data, this.priority);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // \u591A\u6B21\u5806\u9876\u51FA\u5806\r\n    popMaxs(count: number) {\r\n        const results = [];\r\n\r\n        if (typeof count !== 'number' || count <= 0) {\r\n            console.error('popMaxs error: argument count must be a integer greater than 0!');\r\n        } else if (count > this.data.length) {\r\n            console.error('popMaxs error: argument count greater than heap size!');\r\n        } else {\r\n            for (let i = 0; i < count; i++) {\r\n                results.push(this.popMax());\r\n            }\r\n        }\r\n        return results;\r\n    }\r\n}\r\n\r\nconst global: MyGlobal = window;\r\nglobal.heap = new Heap([3, 10, 19, 8, 6]);\r\n\r\nexport default Heap;\r\n", "class Stack {\r\n    constructor() {\r\n        console.log('Stack');\r\n    }\r\n\r\n    add(num1: number, num2: number) {\r\n        return num1 + num2;\r\n    }\r\n}\r\n\r\nexport default Stack;\r\n", "import Heap from './heap/index';\r\nimport Stack from './stack/index';\r\n\r\nexport default {\r\n    Heap,\r\n    Stack,\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
