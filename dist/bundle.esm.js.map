{
  "version": 3,
  "sources": ["../src/heap/index.ts", "../src/stack/index.ts", "../src/index.ts"],
  "sourcesContent": ["import { heapData, heapDataArguments } from './type';\r\nclass Heap {\r\n    public size: number;\r\n    public small: boolean;\r\n    public data: heapData;\r\n\r\n    constructor(data: heapDataArguments, small?: boolean) {\r\n        this.small = Boolean(small);\r\n\r\n        if (data && data.length) {\r\n            this.size = data.length;\r\n            this.data = data;\r\n            this.initHeap();\r\n        } else {\r\n            this.size = 0;\r\n            this.data = [];\r\n        }\r\n\r\n        Object.defineProperty(this, 'small', {\r\n            get() {\r\n                return Boolean(small);\r\n            },\r\n            set(val) {\r\n                small = Boolean(val);\r\n                this.initHeap();\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * \u8C03\u6574\u4E3A\u5927\u5806\r\n     * @param parentIndex   \u8C03\u6574\u7684\u7236\u8282\u70B9\u7D22\u5F15\r\n     * @param data          \u8C03\u6574\u7684\u5806\u7684\u7269\u7406\u5B58\u50A8\r\n     */\r\n    static adjustBigHeap(parentIndex: number, data: heapData) {\r\n        let childIndex = 2 * parentIndex + 1;\r\n\r\n        // \u5728\u53F3\u5B50\u8282\u70B9\u5927\u4E8E\u5DE6\u5B50\u8282\u70B9\u7684\u60C5\u51B5\u4E0B\u66F4\u65B0childIndex\u4E3A\u53F3\u5B50\u8282\u70B9\u7684\u7D22\u5F15\r\n        if (data[childIndex] && data[childIndex + 1] && data[childIndex + 1] > data[childIndex]) {\r\n            childIndex = childIndex + 1;\r\n        }\r\n\r\n        // \u5728\u7236\u8282\u70B9\u5C0F\u4E8E\u5B50\u8282\u70B9\u7684\u60C5\u51B5\u4E0B\u9700\u8981\u9012\u5F52\u5904\u7406\r\n        if (data[parentIndex] < data[childIndex]) {\r\n            const temp = data[parentIndex];\r\n            data[parentIndex] = data[childIndex];\r\n            data[childIndex] = temp;\r\n            // \u9012\u5F52\u5904\u7406\u5B50\u8282\u70B9\r\n            Heap.adjustBigHeap(childIndex, data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u8C03\u6574\u4E3A\u5C0F\u5806\r\n     * @param parentIndex   \u8C03\u6574\u7684\u7236\u8282\u70B9\u7D22\u5F15\r\n     * @param data          \u8C03\u6574\u7684\u5806\u7684\u7269\u7406\u5B58\u50A8\r\n     */\r\n    static adjustSmallHeap(parentIndex: number, data: heapData) {\r\n        let childIndex = 2 * parentIndex + 1;\r\n\r\n        // \u5728\u53F3\u5B50\u8282\u70B9\u5C0F\u4E8E\u5DE6\u5B50\u8282\u70B9\u7684\u60C5\u51B5\u4E0B\u66F4\u65B0childIndex\u4E3A\u53F3\u5B50\u8282\u70B9\u7684\u7D22\u5F15\r\n        if (data[childIndex] && data[childIndex + 1] && data[childIndex + 1] < data[childIndex]) {\r\n            childIndex = childIndex + 1;\r\n        }\r\n\r\n        // \u5728\u7236\u8282\u70B9\u5927\u4E8E\u5B50\u8282\u70B9\u7684\u60C5\u51B5\u4E0B\u9700\u8981\u9012\u5F52\u5904\u7406\r\n        if (data[parentIndex] > data[childIndex]) {\r\n            const temp = data[parentIndex];\r\n            data[parentIndex] = data[childIndex];\r\n            data[childIndex] = temp;\r\n            // \u9012\u5F52\u5904\u7406\u5B50\u8282\u70B9\r\n            Heap.adjustSmallHeap(childIndex, data);\r\n        }\r\n    }\r\n\r\n    // \u521D\u59CB\u5316\u5806\r\n    initHeap() {\r\n        if (!this.data.length) {\r\n            return;\r\n        } else {\r\n            // \u83B7\u53D6\u5C3E\u8282\u70B9\u7684\u7236\u8282\u70B9\u7D22\u5F15\r\n            let i = Math.floor((this.data.length - 2) / 2);\r\n            // \u4F9D\u6B21\u5BF9i\u4EE5\u4E0B\u7684\u8282\u70B9\u8FDB\u884C\u987A\u5E8F\u8C03\u6574\r\n            while (i >= 0) {\r\n                this.small ? Heap.adjustSmallHeap(i, this.data) : Heap.adjustBigHeap(i, this.data);\r\n                i--;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// window.heap = new Heap([1, 31, 133, 22, 99, 23, 334, 102, 77, 3, 66, 12, 44, 123, 13]);\r\n\r\nexport default Heap;\r\n", "class Stack {\r\n    constructor() {\r\n        console.log('Stack');\r\n    }\r\n\r\n    add(num1: number, num2: number) {\r\n        return num1 + num2;\r\n    }\r\n}\r\n\r\nexport default Stack;\r\n", "import Heap from './heap/index';\r\nimport Stack from './stack/index';\r\n\r\nexport default {\r\n    Heap,\r\n    Stack,\r\n};\r\n"],
  "mappings": ";AACA,IAAM,OAAN,MAAW;AAAA,EAKP,YAAY,MAAyB,OAAiB;AAClD,SAAK,QAAQ,QAAQ,KAAK;AAE1B,QAAI,QAAQ,KAAK,QAAQ;AACrB,WAAK,OAAO,KAAK;AACjB,WAAK,OAAO;AACZ,WAAK,SAAS;AAAA,IAClB,OAAO;AACH,WAAK,OAAO;AACZ,WAAK,OAAO,CAAC;AAAA,IACjB;AAEA,WAAO,eAAe,MAAM,SAAS;AAAA,MACjC,MAAM;AACF,eAAO,QAAQ,KAAK;AAAA,MACxB;AAAA,MACA,IAAI,KAAK;AACL,gBAAQ,QAAQ,GAAG;AACnB,aAAK,SAAS;AAAA,MAClB;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAOA,OAAO,cAAc,aAAqB,MAAgB;AACtD,QAAI,aAAa,IAAI,cAAc;AAGnC,QAAI,KAAK,eAAe,KAAK,aAAa,MAAM,KAAK,aAAa,KAAK,KAAK,aAAa;AACrF,mBAAa,aAAa;AAAA,IAC9B;AAGA,QAAI,KAAK,eAAe,KAAK,aAAa;AACtC,YAAM,OAAO,KAAK;AAClB,WAAK,eAAe,KAAK;AACzB,WAAK,cAAc;AAEnB,WAAK,cAAc,YAAY,IAAI;AAAA,IACvC;AAAA,EACJ;AAAA,EAOA,OAAO,gBAAgB,aAAqB,MAAgB;AACxD,QAAI,aAAa,IAAI,cAAc;AAGnC,QAAI,KAAK,eAAe,KAAK,aAAa,MAAM,KAAK,aAAa,KAAK,KAAK,aAAa;AACrF,mBAAa,aAAa;AAAA,IAC9B;AAGA,QAAI,KAAK,eAAe,KAAK,aAAa;AACtC,YAAM,OAAO,KAAK;AAClB,WAAK,eAAe,KAAK;AACzB,WAAK,cAAc;AAEnB,WAAK,gBAAgB,YAAY,IAAI;AAAA,IACzC;AAAA,EACJ;AAAA,EAGA,WAAW;AACP,QAAI,CAAC,KAAK,KAAK,QAAQ;AACnB;AAAA,IACJ,OAAO;AAEH,UAAI,IAAI,KAAK,OAAO,KAAK,KAAK,SAAS,KAAK,CAAC;AAE7C,aAAO,KAAK,GAAG;AACX,aAAK,QAAQ,KAAK,gBAAgB,GAAG,KAAK,IAAI,IAAI,KAAK,cAAc,GAAG,KAAK,IAAI;AACjF;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;AAIA,IAAO,eAAQ;;;AC7Ff,IAAM,QAAN,MAAY;AAAA,EACR,cAAc;AACV,YAAQ,IAAI,OAAO;AAAA,EACvB;AAAA,EAEA,IAAI,MAAc,MAAc;AAC5B,WAAO,OAAO;AAAA,EAClB;AACJ;AAEA,IAAO,gBAAQ;;;ACPf,IAAO,cAAQ;AAAA,EACX;AAAA,EACA;AACJ;",
  "names": []
}
